<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Order extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Order_model');
		$this->load->model('Rawmaterial_model');
		$this->load->model('Location_model');
		$this->load->model('Unit_model');
    } 

    /*
     * Listing of order
     */
    function index()
    {
		 if ($this->auth->loggedin()) {
			$id = $this->auth->userid();
			if(!($this->User_model->hasPermission('read',$id)&&($this->User_model->hasPermission('order',$id)||$this->User_model->hasPermission('WILD_CARD',$id)))){
				show_error('You Don\'t have permission to perform this operation.');
				return false;
			}
			$user = $this->User_model->get('person_id', $id);
			unset($user['password']);
			
			$user_role = $this->User_model->loadRoles($user['person_id']);
					$this->data['user'] = $user['username'];
					$this->data['role'] = $user_role;
					$specialPerm =  $this->User_model->loadSpecialPermission($id);
					
					$this->data['pp'] = $specialPerm;
					if($this->User_model->hasPermission('WILD_CARD',$id)){
						$this->data['order'] = $this->Order_model->get_all_order();
					}
					else{
						$this->data['order'] = $this->Order_model->get_location_order($user['location_id']);
					}
					 
					 $this->data['p_role'] = $this->Person_role_model->get_person_role($id);
					 $this->data['location'] = $this->Location_model->get_all_location();
					 $this->data['unit'] = $this->Unit_model->get_all_units();
					 $this->data['rawMaterial'] = $this->Rawmaterial_model->get_all_rawmaterial();
					
			$this->template
					->title('Welcome','My Aapp')
					->build('order/index',$this->data);
		}
		else{
			$this->template
					->title('Login Admin','Login Page')
					->set_layout('access')
					->build('access/login');
		}
       
        
    }

    /*
     * Adding a new order
     */
    function add()
    {   
		if ($this->auth->loggedin()) {
			$id = $this->auth->userid();
			if(!($this->User_model->hasPermission('add',$id)&&($this->User_model->hasPermission('order',$id)||$this->User_model->hasPermission('WILD_CARD',$id)))){
				show_error('You Don\'t have permission to perform this operation.');
				return false;
			}
			$user = $this->User_model->get('person_id', $id);
				unset($user['password']);
			// $this->form_validation->set_rules('name', '<b>Name</b>', 'trim|required|min_length[1]|max_length[100]');
			// $this->form_validation->set_rules('date', '<b>Date</b>', 'trim|required');
			//$this->form_validation->set_rules('location_id', '<b>Location</b>', 'trim|required|min_length[1]');
			$this->form_validation->set_rules('quantity', '<b>Quantity</b>', 'trim|required|min_length[1]');
			$this->form_validation->set_rules('unit_id', '<b>Unit</b>', 'trim|required');
			$this->form_validation->set_rules('rawMaterial_id', '<b>Raw Material</b>', 'trim|required');
				
			if(isset($_POST) && count($_POST) > 0 && $this->form_validation->run())    
			{   
				$params = array(
					'date' => time(),
					'location_id' => $user['location_id'],
					'quantity' => $this->input->post('quantity'),
					'unit_id' => $this->input->post('unit_id'),
					'rawMaterial_id' => $this->input->post('rawMaterial_id'),
				);
				
				$order_id = $this->Order_model->add_order($params);
				redirect('order/index');
			}
			else
			{            
				
				
				
				$user_role = $this->User_model->loadRoles($user['person_id']);
						$this->data['user'] = $user['username'];
						$this->data['role'] = $user_role;
						$specialPerm =  $this->User_model->loadSpecialPermission($id);
						
						$this->data['pp'] = $specialPerm;
						$this->data['rawmaterial'] = $this->Rawmaterial_model->get_all_rawmaterial();
						$this->data['units'] = $this->Unit_model->get_all_units();
						$this->data['p_role'] = $this->Person_role_model->get_person_role($id);
						
				$this->template
						->title('Welcome','My Aapp')
						->build('order/add',$this->data);
			}

		}
		else{
			$this->template
					->title('Login Admin','Login Page')
					->set_layout('access')
					->build('access/login');
		}

		
    }  

    /*
     * Editing a order
     */
    function edit($order_id)
    {   
		if ($this->auth->loggedin()) {
			$id = $this->auth->userid();
			if(!($this->User_model->hasPermission('update',$id)&&($this->User_model->hasPermission('order',$id)||$this->User_model->hasPermission('WILD_CARD',$id)))){
				show_error('You Don\'t have permission to perform this operation.');
				return false;
			}
			// check if the order exists before trying to edit it
			$this->data['order'] = $this->Order_model->get_order($order_id);
			
			if(isset($this->data['order']['id']))
			{
				//$this->form_validation->set_rules('location_id', '<b>Location</b>', 'trim|required|min_length[1]');
				$this->form_validation->set_rules('quantity', '<b>Quantity</b>', 'trim|required|min_length[1]');
				$this->form_validation->set_rules('unit_id', '<b>Unit</b>', 'trim|required');
				//$this->form_validation->set_rules('rawMaterial_id', '<b>Raw Material</b>', 'trim|required');
					
				if(isset($_POST) && count($_POST) > 0 && $this->form_validation->run())   
				{   
					$params = array(
						'orderNumber' => $this->input->post('orderNumber'),
						'date' => time(),
						'quantity' => $this->input->post('quantity'),
						'unit_id' => $this->input->post('unit_id'),
						//'rawMaterial_id' => $this->input->post('rawMaterial_id'),
					);

					$this->Order_model->update_order($order_id,$params);            
					redirect('order/index');
				}
				else
				{
					$user = $this->User_model->get('person_id', $id);
					unset($user['password']);
					
					$user_role = $this->User_model->loadRoles($user['person_id']);
							$this->data['user'] = $user['username'];
							$this->data['role'] = $user_role;
							$specialPerm =  $this->User_model->loadSpecialPermission($id);
							
							$this->data['pp'] = $specialPerm;
							$this->data['rawMaterial'] = $this->Rawmaterial_model->get_all_rawmaterial();
							$this->data['units'] = $this->Unit_model->get_all_units();
							$this->data['p_role'] = $this->Person_role_model->get_person_role($id);
							
					$this->template
						->title('Welcome','My Aapp')
						->build('order/edit',$this->data);
				}
			}
			else
				show_error('The order you are trying to edit does not exist.');
		}else{
			$this->template
				->title('Login Admin','Login Page')
				->set_layout('access')
				->build('access/login');
		}
    } 

    /*
     * Deleting order
     */
    function remove($order_id)
    {
		if ($this->auth->loggedin()) {
			$id = $this->auth->userid();
			if(!($this->User_model->hasPermission('delete',$id)&&($this->User_model->hasPermission('order',$id)||$this->User_model->hasPermission('WILD_CARD',$id)))){
				show_error('You Don\'t have permission to perform this operation.');
				return false;
			}
			$order = $this->Order_model->get_order($order_id);

			// check if the order exists before trying to delete it
			if(isset($order['id']))
			{
				$this->Order_model->delete_order($order_id);
				redirect('order/index');
			}
			else
				show_error('The order you are trying to delete does not exist.');
		}else{
		$this->template
			->title('Login Admin','Login Page')
			->set_layout('access')
			->build('access/login');
		}
    }
    
}
