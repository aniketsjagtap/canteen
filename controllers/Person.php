<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Person extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Person_model');
        $this->load->model('Statu_model');
        $this->load->model('Role_model');
        $this->load->model('Location_model');
        $this->load->model('Person_location_model');
		
    } 

    /*
     * Listing of person
     */
    function index()
    {
	
		if ($this->auth->loggedin()) {
			$id = $this->auth->userid();
			if(!($this->User_model->hasPermission('read',$id)&&($this->User_model->hasPermission('person',$id)||$this->User_model->hasPermission('WILD_CARD',$id)))){
				show_error('You Don\'t have permission to perform this operation.');
				return false;
			}
			$user = $this->User_model->get('person_id', $id);
			unset($user['password']);
			$user_role = $this->User_model->loadRoles($user['person_id']);
			
			$this->data['user'] = $user['username'];
			$this->data['urole'] = $user_role;
			$specialPerm =  $this->User_model->loadSpecialPermission($id);
					
			$this->data['person'] = $this->Person_model->get_all_status_person();
			$this->data['pp'] = $specialPerm;
			$this->data['p_role'] = $this->Person_role_model->get_person_role($id);
			$this->data['role'] = $this->Role_model->get_all_role();
			$this->data['location'] = $this->Location_model->get_all_location();
			$this->data['status'] = $this->Statu_model->get_all_status();
			
			$this->template
				->title('Welcome','My Aapp')
				->build('person/index',$this->data);
		}
		else{
			$this->template
					->title('Login Admin','Login Page')
					->set_layout('access')
					->build('access/login');
		}
        
    }

    /*
     * Adding a new person
     */
    function add()
    {   
		if ($this->auth->loggedin()) {
			$id = $this->auth->userid();
			if(!($this->User_model->hasPermission('add',$id)&&($this->User_model->hasPermission('person',$id)||$this->User_model->hasPermission('WILD_CARD',$id)))){
				show_error('You Don\'t have permission to perform this operation.');
				return false;
			}
			$this->form_validation->set_rules('username', '<b>Username</b>', 'trim|required|min_length[5]|max_length[12]');
			$this->form_validation->set_rules('password', '<b>Password</b>', 'trim|required');
			$this->form_validation->set_rules('first_name', '<b>First Name</b>', 'trim|required|min_length[2]|max_length[12]');
			$this->form_validation->set_rules('Last_name', '<b>Last Name</b>', 'trim|required|min_length[2]|max_length[12]');
			
			$this->form_validation->set_rules('gender', '<b>Gender</b>', 'trim|required');
			$this->form_validation->set_rules('mobile', '<b>Mobile</b>', 'trim|required|integer|min_length[10]|max_length[11]');
			$this->form_validation->set_rules('role_id', '<b>Role</b>', 'trim|required|integer|min_length[1]|max_length[4]');
			$this->form_validation->set_rules('location_id', '<b>Location</b>', 'trim|required|integer|min_length[1]|max_length[4]');
			$this->form_validation->set_rules('status_id', '<b>Status</b>', 'trim|required|integer|min_length[1]|max_length[4]');
						
			if(isset($_POST) && count($_POST) > 0 && $this->form_validation->run())     
			{   
				$person_id = $this->User_model->register_user();            
				//$person_id = $this->Person_model->add_person($params);
				$params1 = array(
							'person_id' => $person_id,
							'role_id' => $this->input->post('role_id'),
						);
						$this->Person_role_model->update_person_role($person_id,$params1);
						
						$params2 = array(
							'person_id' => $person_id,
							'location_id' => $this->input->post('location_id'),
						);
						$this->Person_location_model->update_person_location($person_id,$params2);	
				redirect('person/index');
			}
			else
			{            
				
				$user = $this->User_model->get('person_id', $id);
				unset($user['password']);
				
				$user_role = $this->User_model->loadRoles($user['person_id']);
					$this->data['user'] = $user['username'];
					$this->data['role'] = $user_role;
					$this->data['gender'] = $user['gender'];
					$specialPerm =  $this->User_model->loadSpecialPermission($id);
					
					$this->data['pp'] = $specialPerm;
					$this->data['p_role'] = $this->Person_role_model->get_person_role($id);
					$this->data['role'] = $this->Role_model->get_all_role();
					$this->data['location'] = $this->Location_model->get_all_location();
					$this->data['status'] = $this->Statu_model->get_all_status();
					
				$this->template
					->title('Welcome','My Aapp')
					->build('person/add',$this->data);
			}
		}
		else{
			$this->template
					->title('Login Admin','Login Page')
					->set_layout('access')
					->build('access/login');
		}
    }  

    /*
     * Editing a person
     */
    function edit($person_id)
    {   

		if ($this->auth->loggedin()) {
			$id = $this->auth->userid();
			if(!($this->User_model->hasPermission('update',$id)&&($this->User_model->hasPermission('person',$id)||$this->User_model->hasPermission('WILD_CARD',$id)))){
				show_error('You Don\'t have permission to perform this operation.');
				return false;
			}
				$this->data['person'] = $this->Person_model->get_person($person_id);
        
				if(isset($this->data['person']['person_id']))
				{
					
				$this->form_validation->set_rules('username', '<b>Username</b>', 'trim|required|min_length[5]|max_length[12]');
				$this->form_validation->set_rules('first_name', '<b>First Name</b>', 'trim|required|min_length[2]|max_length[12]');
				$this->form_validation->set_rules('Last_name', '<b>Last Name</b>', 'trim|required|min_length[2]|max_length[12]');
				
				$this->form_validation->set_rules('gender', '<b>Gender</b>', 'trim|required');
				$this->form_validation->set_rules('mobile', '<b>Mobile</b>', 'trim|required|integer|min_length[10]|max_length[11]');
				$this->form_validation->set_rules('role_id', '<b>Role</b>', 'trim|required|integer|min_length[1]|max_length[4]');
				$this->form_validation->set_rules('location_id', '<b>Location</b>', 'trim|required|integer|min_length[1]|max_length[4]');
				
					if(isset($_POST) && count($_POST) > 0 && $this->form_validation->run())     
					{  
						
						$params = array(
							'password' => $this->input->post('password'),
							'username' => $this->input->post('username'),
							'first_name' => $this->input->post('first_name'),
							'Last_name' => $this->input->post('Last_name'),
							'middle_name' => $this->input->post('middle_name'),
							'mobile' => $this->input->post('mobile'),
							'role_id' => $this->input->post('role_id'),
							'gender' => $this->input->post('gender'),
							'email' => $this->input->post('email'),
							'registered' => $this->input->post('registered'),
							'status_id' => $this->input->post('status_id'),
						);
						$this->Person_model->update_person($person_id,$params); 
						
						$params1 = array(
							'person_id' => $person_id,
							'role_id' => $this->input->post('role_id'),
						);
						$this->Person_role_model->update_person_role($person_id,$params1);
						
						$params2 = array(
							'person_id' => $person_id,
							'location_id' => $this->input->post('location_id'),
						);
						$this->Person_location_model->update_person_location($person_id,$params2);					
						redirect('person/index');
					}
					else
					{
						
						$user = $this->User_model->get('person_id', $id);
						$person = $this->User_model->get('person_id', $person_id);
						
						unset($user['password']);
						unset($person['password']);
						$user_role = $this->User_model->loadRoles($user['person_id']);
						
						$this->data['user'] = $user['username'];
						$this->data['role'] = $user_role;
						$specialPerm =  $this->User_model->loadSpecialPermission($id);
								
						$this->data['pp'] = $specialPerm;
						$this->data['gender'] = $person['gender'];
						$this->data['p_role'] = $this->Person_role_model->get_person_role($id);
						$this->data['role'] = $this->Role_model->get_all_role();
						$this->data['location'] = $this->Location_model->get_all_location();
						$this->data['status'] = $this->Statu_model->get_all_status();
						
						$this->template
							->title('Welcome','My Aapp')
							->build('person/edit',$this->data);
					}
				}
				else
				{
					show_error('The person you are trying to edit does not exist.');
					}
			}
			else{
				$this->template
						->title('Login Admin','Login Page')
						->set_layout('access')
						->build('access/login');
			}
        // check if the person exists before trying to edit it
       
    } 

    /*
     * Deleting person
     */
    function remove($person_id)
    {
		if ($this->auth->loggedin()) {
		
			$id = $this->auth->userid();
			
			if(!($this->User_model->hasPermission('delete',$id)&&($this->User_model->hasPermission('person',$id)||$this->User_model->hasPermission('WILD_CARD',$id)))){
			
				show_error('You Don\'t have permission to perform this operation.');
				return false;
			}
			$person = $this->Person_model->get_person($person_id);

			// check if the person exists before trying to delete it
			if(isset($person['person_id']))
			{
				// $this->Person_role_model->delete_person_role($person_id);
				// $this->Person_location_model->delete_person_location($person_id);
				$this->Person_model->delete_person($person_id);
				redirect('person/index');
			}
			else
				show_error('The person you are trying to delete does not exist.');
		}
		else{
			$this->template
					->title('Login Admin','Login Page')
					->set_layout('access')
					->build('access/login');
		}
	}
    
}
