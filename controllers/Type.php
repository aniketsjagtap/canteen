<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Type extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Type_model');
		$this->load->model('Category_model');
    } 

    /*
     * Listing of type
     */
    function index()
    {
	
		if ($this->auth->loggedin()) {
			$id = $this->auth->userid();
			if(!($this->User_model->hasPermission('read',$id)&&($this->User_model->hasPermission('type',$id)||$this->User_model->hasPermission('WILD_CARD',$id)))){
				show_error('You Don\'t have permission to perform this operation.');
				return false;
			}
			$user = $this->User_model->get('person_id', $id);
			unset($user['password']);
			
			$user_role = $this->User_model->loadRoles($user['person_id']);
					$this->data['user'] = $user['username'];
					$this->data['role'] = $user_role;
					$specialPerm =  $this->User_model->loadSpecialPermission($id);
					
					$this->data['pp'] = $specialPerm;
					$this->data['type'] = $this->Type_model->get_all_type();
					$this->data['category'] = $this->Category_model->get_all_category();
					$this->data['p_role'] = $this->Person_role_model->get_person_role($id);
			$this->template
					->title('Welcome','My Aapp')
					->build('type/index',$this->data);
		}
		else{
			$this->template
					->title('Login Admin','Login Page')
					->set_layout('access')
					->build('access/login');
		}
        
    }

    /*
     * Adding a new type
     */
    function add()
    {   
		if ($this->auth->loggedin()) {
			$id = $this->auth->userid();
			if(!($this->User_model->hasPermission('add',$id)&&($this->User_model->hasPermission('type',$id)||$this->User_model->hasPermission('WILD_CARD',$id)))){
				show_error('You Don\'t have permission to perform this operation.');
				return false;
			}
			$this->form_validation->set_rules('name', '<b>Name</b>', 'trim|required|min_length[1]|max_length[100]');
			$this->form_validation->set_rules('category_id', '<b>Category</b>', 'trim|required');
				
			if(isset($_POST) && count($_POST) > 0 && $this->form_validation->run()) 
				{   
				$params = array(
					'name' => $this->input->post('name'),
					'description' => $this->input->post('description'),
					'category_id' => $this->input->post('category_id'),
				);
				
				$type_id = $this->Type_model->add_type($params);
				redirect('type/index');
			}
			else
			{            
				
				$user = $this->User_model->get('person_id', $id);
				unset($user['password']);
				
				$user_role = $this->User_model->loadRoles($user['person_id']);
						$this->data['user'] = $user['username'];
						$this->data['role'] = $user_role;
						$specialPerm =  $this->User_model->loadSpecialPermission($id);
						
						$this->data['pp'] = $specialPerm;
						$this->data['type'] = $this->Type_model->get_all_type();
						$this->data['category'] = $this->Category_model->get_all_category();
						$this->data['p_role'] = $this->Person_role_model->get_person_role($id);
						
				$this->template
					->title('Welcome','My Aapp')
					->build('type/add',$this->data);
			}
				
		}
		else{
			$this->template
					->title('Login Admin','Login Page')
					->set_layout('access')
					->build('access/login');
		}
       
    }  

    /*
     * Editing a type
     */
    function edit($type_id)
    {   
		if ($this->auth->loggedin()) {
			$id = $this->auth->userid();
			if(!($this->User_model->hasPermission('update',$id)&&($this->User_model->hasPermission('type',$id)||$this->User_model->hasPermission('WILD_CARD',$id)))){
				show_error('You Don\'t have permission to perform this operation.');
				return false;
			}
			// check if the type exists before trying to edit it
			$this->data['type'] = $this->Type_model->get_type($type_id);
			
			if(isset($this->data['type']['id']))
			{
				$this->form_validation->set_rules('name', '<b>Name</b>', 'trim|required|min_length[1]|max_length[100]');
				$this->form_validation->set_rules('category_id', '<b>Category</b>', 'trim|required');
					
				if(isset($_POST) && count($_POST) > 0 && $this->form_validation->run()) 
				{    
					$params = array(
						'name' => $this->input->post('name'),
						'description' => $this->input->post('description'),
						'category_id' => $this->input->post('category_id'),
					);

					$this->Type_model->update_type($type_id,$params);            
					redirect('type/index');
				}
				else
				{
					
					$user = $this->User_model->get('person_id', $id);
					unset($user['password']);
					
					$user_role = $this->User_model->loadRoles($user['person_id']);
						$this->data['user'] = $user['username'];
						$this->data['role'] = $user_role;
						$specialPerm =  $this->User_model->loadSpecialPermission($id);
						
						$this->data['pp'] = $specialPerm;
						$this->data['category'] = $this->Category_model->get_all_category();
						$this->data['p_role'] = $this->Person_role_model->get_person_role($id);
						
					$this->template
						->title('Welcome','My Aapp')
						->build('type/edit',$this->data);
				}
			}
			else
				show_error('The type you are trying to edit does not exist.');
		}
		else{
			$this->template
					->title('Login Admin','Login Page')
					->set_layout('access')
					->build('access/login');
		}
        
    } 

    /*
     * Deleting type
     */
    function remove($type_id)
    {
	
		if ($this->auth->loggedin()) {
			$id = $this->auth->userid();
			if(!($this->User_model->hasPermission('delete',$id)&&($this->User_model->hasPermission('type',$id)||$this->User_model->hasPermission('WILD_CARD',$id)))){
				show_error('You Don\'t have permission to perform this operation.');
				return false;
			}
			$type = $this->Type_model->get_type($type_id);

			// check if the type exists before trying to delete it
			if(isset($type['id']))
			{
				$this->Type_model->delete_type($type_id);
				redirect('type/index');
			}
			else
				show_error('The type you are trying to delete does not exist.');
		}
		else{
			$this->template
					->title('Login Admin','Login Page')
					->set_layout('access')
					->build('access/login');
		}
        
    }
    
}
