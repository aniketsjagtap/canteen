<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Category extends CI_Controller{
	var $data = array();
	
    function __construct()
    {
        parent::__construct();
		$this->load->model('Category_model');
		$this->load->model('Division_model');
    } 

    /*
     * Listing of category
     */
    function index()
    {
		if ($this->auth->loggedin()) {
			$id = $this->auth->userid();
			if(!($this->User_model->hasPermission('read',$id)&&($this->User_model->hasPermission('category',$id)||$this->User_model->hasPermission('WILD_CARD',$id)))){
			
				show_error('You Don\'t have permission to perform this operation.');
				return false;
			}
			$user = $this->User_model->get('person_id', $id);
			unset($user['password']);
		$user_role = $this->User_model->loadRoles($user['person_id']);
				
					$this->data['user'] = $user['username'];
					$this->data['role'] = $user_role;
					$specialPerm =  $this->User_model->loadSpecialPermission($id);
					$this->data['pp'] = $specialPerm;
			
			$this->data['category'] = $this->Category_model->get_all_category();
			$this->data['division'] = $this->Division_model->get_all_division();
			$this->data['p_role'] = $this->Person_role_model->get_person_role($id);
			$this->template
			->title('Welcome','My Aapp')
			->build('category/index',$this->data);
		}
		else
		{
			$this->template
					->title('Login Admin','Login Page')
					->set_layout('access')
					->build('access/login');
		
		}
    }

    /*
     * Adding a new category
     */
    function add()
    {   
	if ($this->auth->loggedin()) {
			$id = $this->auth->userid();
			if(!($this->User_model->hasPermission('add',$id)&&($this->User_model->hasPermission('category',$id)||$this->User_model->hasPermission('WILD_CARD',$id)))){
			
				show_error('You Don\'t have permission to perform this operation.');
				return false;
			}
				   
			$this->form_validation->set_rules('name', '<b>Name</b>', 'trim|required|min_length[1]|max_length[100]');
			$this->form_validation->set_rules('division_id', '<b>Division</b>', 'trim|required');
				
			if(isset($_POST) && count($_POST) > 0 && $this->form_validation->run()) 
				{
				$params = array(
				'name' => $this->input->post('name'),
				'division_id' => $this->input->post('division_id'));
				
				$this->data['category_id'] = $this->Category_model->add_category($params);
					redirect('Category/index');
				}
			
			else{
			
				
				$user = $this->User_model->get('person_id', $id);
				unset($user['password']);
				$user_role = $this->User_model->loadRoles($user['person_id']);
					$this->data['user'] = $user['username'];
					$this->data['role'] = $user_role;
					$specialPerm =  $this->User_model->loadSpecialPermission($id);
					$this->data['pp'] = $specialPerm;
					$this->data['division'] = $this->Division_model->get_all_division();
					$this->data['p_role'] = $this->Person_role_model->get_person_role($id);
							
				$this->template
							->title('Welcome','My App')
							->build('category/add',$this->data);
			}
		}
		else{
			$this->template
					->title('Login Admin','Login Page')
					->set_layout('access')
					->build('access/login');
		}
	}  

    /*
     * Editing a category
     */
    function edit($cat_id)
    {   
		
		if ($this->auth->loggedin()) {
			$id = $this->auth->userid();
			if(!($this->User_model->hasPermission('update',$id)&&($this->User_model->hasPermission('category',$id)||$this->User_model->hasPermission('WILD_CARD',$id)))){
			
				show_error('You Don\'t have permission to perform this operation.');
				return false;
			}
			// check if the category exists before trying to edit it
			$this->data['category'] = $this->Category_model->get_category($cat_id);
			
			if(isset($this->data['category']['id']))
			{
				
				$this->form_validation->set_rules('name', '<b>Name</b>', 'trim|required|min_length[1]|max_length[100]');
				$this->form_validation->set_rules('division_id', '<b>Division</b>', 'trim|required');
					
				if(isset($_POST) && count($_POST) > 0 && $this->form_validation->run()) 
				{   
					$params = array(
						'name' => $this->input->post('name'),
						'division_id' => $this->input->post('division_id'),
					);

					$this->Category_model->update_category($cat_id,$params);            
					
					
					redirect('category/index');
				}
				else
				{
					$id = $this->auth->userid();
					$user = $this->User_model->get('person_id', $id);
					unset($user['password']);
					$user_role = $this->User_model->loadRoles($user['person_id']);
					
					$this->data['user'] = $user['username'];
					$this->data['role'] = $user_role;
					$specialPerm =  $this->User_model->loadSpecialPermission($id);
					$this->data['pp'] = $specialPerm;
			   
					$this->data['division'] = $this->Division_model->get_all_division();
					$this->data['p_role'] = $this->Person_role_model->get_person_role($id);
				
					$this->template
					->title('Welcome','My App')
					->build('category/edit',$this->data);
					
				}
				
			}
			else
				show_error('The category you are trying to edit does not exist.');
		}
		else{
			$this->template
					->title('Login Admin','Login Page')
					->set_layout('access')
					->build('access/login');
		}
    } 

    /*
     * Deleting category
     */
    function remove($cat_id)
    {
		if ($this->auth->loggedin()) {
			$id = $this->auth->userid();
				if(!($this->User_model->hasPermission('delete',$id)&&($this->User_model->hasPermission('category',$id)||$this->User_model->hasPermission('WILD_CARD',$id)))){
				
					show_error('You Don\'t have permission to perform this operation.');
					return false;
				}
			$category = $this->Category_model->get_category($cat_id);

			// check if the category exists before trying to delete it
			if(isset($category['id']))
			{
				$this->Category_model->delete_category($cat_id);
				redirect('category/index');
			}
			else
				show_error('The category you are trying to delete does not exist.');
		}else{
			$this->template
					->title('Login Admin','Login Page')
					->set_layout('access')
					->build('access/login');
		}
    }
    
}
