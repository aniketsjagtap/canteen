<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class MyCalender extends CI_Controller{
    function __construct()
    {
        parent::__construct();
		$this->load->model('MyCalender_model');
		$this->load->model('Location_model');
		
    } 

    /*
     * Listing of MyCalender
     */
    function index()
    {
		 if ($this->auth->loggedin()) {
			$id = $this->auth->userid();
			if(!($this->User_model->hasPermission('read',$id)&&($this->User_model->hasPermission('MyCalender',$id)||$this->User_model->hasPermission('WILD_CARD',$id)))){
				show_error('You Don\'t have permission to perform this operation.');
				return false;
			}
			$user = $this->User_model->get('person_id', $id);
			unset($user['password']);
			
			$user_role = $this->User_model->loadRoles($user['person_id']);
					$this->data['user'] = $user['username'];
					$this->data['p_id'] = $user['person_id'];
					$this->data['role'] = $user_role;
					$specialPerm =  $this->User_model->loadSpecialPermission($id);
					
					$this->data['pp'] = $specialPerm;
					
					 
					 $this->data['p_role'] = $this->Person_role_model->get_person_role($id);
					 $this->data['location'] = $user['location_id'];
			$this->template
					->title('Welcome','My Aapp')
					->build('myCalender/index',$this->data);
		}
		else{
			$this->template
					->title('Login Admin','Login Page')
					->set_layout('access')
					->build('access/login');
		}
       
        
    }

    /*
     * Adding a new MyCalender
     */
    function add()
    {   
		if ($this->auth->loggedin()) {
			$id = $this->auth->userid();
			if(!($this->User_model->hasPermission('add',$id)&&($this->User_model->hasPermission('MyCalender',$id)||$this->User_model->hasPermission('WILD_CARD',$id)))){
				show_error('You Don\'t have permission to perform this operation.');
				return false;
			}
			$user = $this->User_model->get('person_id', $id);
				unset($user['password']);
			// $this->form_validation->set_rules('name', '<b>Name</b>', 'trim|required|min_length[1]|max_length[100]');
			// $this->form_validation->set_rules('date', '<b>Date</b>', 'trim|required');
			//$this->form_validation->set_rules('location_id', '<b>Location</b>', 'trim|required|min_length[1]');
			$this->form_validation->set_rules('quantity', '<b>Quantity</b>', 'trim|required|min_length[1]');
			$this->form_validation->set_rules('unit_id', '<b>Unit</b>', 'trim|required');
			$this->form_validation->set_rules('rawMaterial_id', '<b>Raw Material</b>', 'trim|required');
				
			if(isset($_POST) && count($_POST) > 0 && $this->form_validation->run())    
			{   
				$params = array(
					'date' => time(),
					'location_id' => $user['location_id'],
					'quantity' => $this->input->post('quantity'),
					'unit_id' => $this->input->post('unit_id'),
					'rawMaterial_id' => $this->input->post('rawMaterial_id'),
				);
				
				$MyCalender_id = $this->MyCalender_model->add_MyCalender($params);
				redirect('MyCalender/index');
			}
			else
			{            
				
				
				
				$user_role = $this->User_model->loadRoles($user['person_id']);
						$this->data['user'] = $user['username'];
						$this->data['role'] = $user_role;
						$specialPerm =  $this->User_model->loadSpecialPermission($id);
						
						$this->data['pp'] = $specialPerm;
						$this->data['rawmaterial'] = $this->Rawmaterial_model->get_all_rawmaterial();
						$this->data['units'] = $this->Unit_model->get_all_units();
						$this->data['p_role'] = $this->Person_role_model->get_person_role($id);
						
				$this->template
						->title('Welcome','My Aapp')
						->build('MyCalender/add',$this->data);
			}

		}
		else{
			$this->template
					->title('Login Admin','Login Page')
					->set_layout('access')
					->build('access/login');
		}

		
    }  

    /*
     * Editing a MyCalender
     */
    function edit($MyCalender_id)
    {   
		if ($this->auth->loggedin()) {
			$id = $this->auth->userid();
			if(!($this->User_model->hasPermission('update',$id)&&($this->User_model->hasPermission('MyCalender',$id)||$this->User_model->hasPermission('WILD_CARD',$id)))){
				show_error('You Don\'t have permission to perform this operation.');
				return false;
			}
			// check if the MyCalender exists before trying to edit it
			$this->data['MyCalender'] = $this->MyCalender_model->get_MyCalender($MyCalender_id);
			
			if(isset($this->data['MyCalender']['id']))
			{
				//$this->form_validation->set_rules('location_id', '<b>Location</b>', 'trim|required|min_length[1]');
				$this->form_validation->set_rules('quantity', '<b>Quantity</b>', 'trim|required|min_length[1]');
				$this->form_validation->set_rules('unit_id', '<b>Unit</b>', 'trim|required');
				//$this->form_validation->set_rules('rawMaterial_id', '<b>Raw Material</b>', 'trim|required');
					
				if(isset($_POST) && count($_POST) > 0 && $this->form_validation->run())   
				{   
					$params = array(
						'MyCalenderNumber' => $this->input->post('MyCalenderNumber'),
						'date' => time(),
						'quantity' => $this->input->post('quantity'),
						'unit_id' => $this->input->post('unit_id'),
						//'rawMaterial_id' => $this->input->post('rawMaterial_id'),
					);

					$this->MyCalender_model->update_MyCalender($MyCalender_id,$params);            
					redirect('MyCalender/index');
				}
				else
				{
					$user = $this->User_model->get('person_id', $id);
					unset($user['password']);
					
					$user_role = $this->User_model->loadRoles($user['person_id']);
							$this->data['user'] = $user['username'];
							$this->data['role'] = $user_role;
							$specialPerm =  $this->User_model->loadSpecialPermission($id);
							
							$this->data['pp'] = $specialPerm;
							$this->data['rawMaterial'] = $this->Rawmaterial_model->get_all_rawmaterial();
							$this->data['units'] = $this->Unit_model->get_all_units();
							$this->data['p_role'] = $this->Person_role_model->get_person_role($id);
							
					$this->template
						->title('Welcome','My Aapp')
						->build('MyCalender/edit',$this->data);
				}
			}
			else
				show_error('The MyCalender you are trying to edit does not exist.');
		}else{
			$this->template
				->title('Login Admin','Login Page')
				->set_layout('access')
				->build('access/login');
		}
    } 

    /*
     * Deleting MyCalender
     */
    function remove($MyCalender_id)
    {
		if ($this->auth->loggedin()) {
			$id = $this->auth->userid();
			if(!($this->User_model->hasPermission('delete',$id)&&($this->User_model->hasPermission('MyCalender',$id)||$this->User_model->hasPermission('WILD_CARD',$id)))){
				show_error('You Don\'t have permission to perform this operation.');
				return false;
			}
			$MyCalender = $this->MyCalender_model->get_MyCalender($MyCalender_id);

			// check if the MyCalender exists before trying to delete it
			if(isset($MyCalender['id']))
			{
				$this->MyCalender_model->delete_MyCalender($MyCalender_id);
				redirect('MyCalender/index');
			}
			else
				show_error('The MyCalender you are trying to delete does not exist.');
		}else{
		$this->template
			->title('Login Admin','Login Page')
			->set_layout('access')
			->build('access/login');
		}
    }
	
	function events(){
		header('Access-Control-Allow-Origin: *'); 
		echo json_encode($this->MyCalender_model->get_all_events());
	}
	function add_events(){
		header('Access-Control-Allow-Origin: *'); 
		if(isset($_POST) && count($_POST) > 0 )   
		{  
			$p_id = $this->input->post('p_id');
				
				if(!($this->User_model->hasPermission('add',$p_id)&&($this->User_model->hasPermission('MyCalender',$p_id)||$this->User_model->hasPermission('WILD_CARD',$p_id)))){
							show_error('You Don\'t have permission to perform this operation.');
							return false;
						}				
			$params = array(
				'title' => $this->input->post('title'),
				'start' => $this->input->post('start'),
				'end' => $this->input->post('end'),
				'location_id' => $this->input->post('loc_id'),
				'person_id' => $p_id,
				
				
			);
			$this->MyCalender_model->add_event($params);
		//	redirect('MyCalender/index');
		}
				
		
	}
	function edit_event(){
		echo json_encode($this->MyCalender_model->get_all_events());
	}
	function delete_events(){
	header('Access-Control-Allow-Origin: *'); 
		if(isset($_POST) && count($_POST) > 0 )   
		{ 
			$p_id = $this->input->post('p_id');
		
		if(!($this->User_model->hasPermission('delete',$p_id)&&($this->User_model->hasPermission('MyCalender',$p_id)||$this->User_model->hasPermission('WILD_CARD',$p_id)))){
					show_error('You Don\'t have permission to perform this operation.');
					return false;
				}
	
		  
					$params = array(
						'id' => $this->input->post('id'),
					);
					$this->MyCalender_model->delete_eve($params);
				//	redirect('MyCalender/index');
			}
	}
    
}
